<?php
// $Id$

/**
 * @file
 * Bitcoin payment method.
 *
 * @author Mike Gogulski - http://www.nostate.com/ http://www.gogulski.com/
 */
//variable_set('uc_payment_logging', TRUE);

/**
 * Set up the Bitcoin payment method settings form.
 */
function uc_bitcoin_settings_form() {
  $form = array();

  $form['server'] = array(
    '#type' => 'fieldset',
    '#title' => t('Server settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['server']['uc_bitcoin_server_scheme'] = array(
    '#type' => 'radios',
    '#title' => t('Server scheme'),
    '#default_value' => variable_get('uc_bitcoin_server_scheme', 1),
    '#options' => array('http' => 'HTTP', 'https' => 'HTTPS'),
  );
  $form['server']['uc_bitcoin_server_certificate_path'] = array(
    '#type' => 'textfield',
    '#title' => t('SSL certificate path'),
    '#default_value' => variable_get('uc_bitcoin_server_certificate_path', ''),
    '#description' => t('Location of the server.cert file you generated for bitcoind, if you are using HTTPS'),
  );
  $form['server']['uc_bitcoin_server_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Server username'),
    '#default_value' => variable_get('uc_bitcoin_server_username', ''),
    '#description' => t("User name for your Bitcoin server's JSON-RPC-HTTP interface"),
  );
  $form['server']['uc_bitcoin_server_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Server password'),
    '#default_value' => variable_get('uc_bitcoin_server_password', ''),
    '#description' => t('Bitcoin server password'),
  );
  $form['server']['uc_bitcoin_server_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Server hostname'),
    '#default_value' => variable_get('uc_bitcoin_server_address', 'localhost'),
    '#description' => t('Bitcoin server domain name or IP address. Use "localhost" if bitcoind is running on the Ubercart server.'),
  );
  $form['server']['uc_bitcoin_server_port'] = array(
    '#type' => 'textfield',
    '#title' => t('Server port'),
    '#default_value' => variable_get('uc_bitcoin_server_port', '8332'),
    '#description' => t('Bitcoin server port (generally 8332)'),
  );
  $form['transaction'] = array(
    '#type' => 'fieldset',
    '#title' => t('Transaction settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['transaction']['uc_bitcoin_transaction_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction timeout (hours)'),
    '#default_value' => variable_get('uc_bitcoin_transaction_timeout', '72'),
    '#description' => t('Transactions not paid for within this number of hours will be automatically cancelled. Decimals are permitted.'),
  );
  $form['transaction']['uc_bitcoin_transaction_confirms'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction confirmations'),
    '#default_value' => variable_get('uc_bitcoin_transaction_confirms', '1'),
    '#description' => t('Minimum number of Bitcoin transaction network confirmations required before a payment is considered accepted.'),
  );
  $form['donate'] = array(
    '#type' => 'item',
    '#title' => t('Like this plugin? Your gift of Bitcoins to 1DDuMEPaQzdH3vLTiQwQvACgnv7tR25SpE would be greatly appreciated. Other ways to send a gift can be found <a href="http://www.nostate.com/support-nostatecom/">here</a>. Thank you!'),
  );
  return system_settings_form($form);
}

/**
 * Validate Bitcoin payment method settings.
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function uc_payment_methods_form_validate($form, &$form_state) {
  $c = $form_state['values']['uc_bitcoin_server_scheme'];
  if ($c != 'http' && $c != 'https')
    form_set_error('uc_bitcoin_server_scheme', t('Server scheme must be HTTP or HTTPS.'));
  if ($c == 'https') {
    $c = $form_state['values']['uc_bitcoin_server_certificate_path'];
    if (!empty($c) && !is_readable($c))
      form_set_error('uc_bitcoin_server_certificate_path', t('SSL certificate file unreadable. Try using an absolute path.'));
  }
  $c = $form_state['values']['uc_bitcoin_server_username'];
  if (empty($c))
    form_set_error('uc_bitcoin_server_username', t('Server username is required.'));
  $c = $form_state['values']['uc_bitcoin_server_password'];
  if (empty($c))
    form_set_error('uc_bitcoin_server_password', t('Server password is required.'));
  $c = $form_state['values']['uc_bitcoin_server_address'];
  if (empty($c))
    form_set_error('uc_bitcoin_server_address', t('Server hostname is required.'));
  $c = $form_state['values']['uc_bitcoin_server_port'];
  if (empty($c) || !is_numeric($c) || $c < 0 || $c > 65535 || floatval($c) != intval($c))
    form_set_error('uc_bitcoin_server_port', t('Server port must be an integer and between 0 and 65535.'));
  $c = $form_state['values']['uc_bitcoin_transaction_timeout'];
  if (empty($c) || !is_numeric($c) || $c <= 0)
    form_set_error('uc_bitcoin_transaction_timeout', t('Transaction timeout must be greater than zero.'));
  $c = $form_state['values']['uc_bitcoin_transaction_confirms'];
  if (!is_numeric($c) || $c < 0 || floatval($c) != intval($c))
    form_set_error('uc_bitcoin_transaction_confirms', t('Required transaction confirmations must be an integer greater than or equal to zero.'));
}

/*******************************************************************************
 * Hook Functions
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_bitcoin_menu() {
  $items = array();
  $items['admin/store/settings/bitcoin'] = array(
    'title' => 'Bitcoin settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_bitcoin_settings'),
    'access arguments' => array('administer store'),
    'description' => 'Bitcoin server and transaction parameters',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

/**
 * Implementation of hook_mail_alter().
 * @param array $&message
 * @todo Make this less fragile.
 *
 * The idea here is to transform:
 *
 *   (t('Payment Method:'))(not 'Bitcoin')'Bitcoin'
 *
 * to
 *
 *   \1\2Bitcoin -- send payment to...
 *
 * But only for invoice emails.
 */
function uc_bitcoin_mail_alter(&$message) {
  if ($message['id'] == 'uc_order_action-mail' && !strstr(uc_store_email_from(), $message['to'])) {
    // fragile
    $bits = explode(" ", $_SESSION['messages']['status'][0]);
    $address = trim($bits[count($bits) - 1], ' .');
    // also looks fragile, no idea if it's really t()-safe
    $message['body'] = preg_replace('/(' . t('Payment Method:') . ')(.*)Bitcoin/s',
      '${1}${2}Bitcoin (' . t("send payment to Bitcoin address !address.", array("!address" => $address)) . ')',
      $message['body']);
  }
}

/**
 * Implementation of hook_order().
 */
function uc_bitcoin_order($op, &$arg1, $arg2) {
  switch ($op) {
    case 'submit':
      include_once("bitcoin.inc");
      $bitcoin_client = new BitcoinClient(variable_get("uc_bitcoin_server_scheme", ""),
        variable_get("uc_bitcoin_server_username", ""),
        variable_get("uc_bitcoin_server_password", ""),
        variable_get("uc_bitcoin_server_address", ""),
        variable_get("uc_bitcoin_server_port", ""),
        variable_get("uc_bitcoin_server_certificate_path", ""));
      if (TRUE !== ($fault = $bitcoin_client->can_connect())) {
        watchdog('uc_bitcoin_order', 'Unable to access Bitcoin server. Fault: !fault', $fault);
        return array(array(
          'pass' => FALSE,
          'message' => t('The Bitcoin server is presently unavailable. Please contact the site administrator.')));
      }
      // stuff the order id, the total order price and a timestamp into the bitcoin address's label
      $label = $arg1->order_id . " " . number_format($arg1->order_total, 2, ".", "") . " " . time();
      try {
        $address = $bitcoin_client->query("getnewaddress", $label);
      } catch (BitcoinClientException $e) {
        watchdog('uc_bitcoin_order', 'getnewaddress failed. Fault: !fault', $fault);
        return array(array('pass' => FALSE, 'message' => t('The Bitcoin server is presently unavailable. Please contact the site administrator.')));
      }
      if (!Bitcoin::checkAddress($address))
        return array(array(
          'pass' => FALSE,
          'message' => t('The Bitcoin server returned an invalid address. Please contact the site administrator.')));
      db_query("INSERT INTO {uc_payment_bitcoin} (order_id, bitcoin_address) VALUES (%d, '%s')", $arg1->order_id, $address);
      $message = t('Please send your payment of BTC @total to Bitcoin address @address.', array(
        '@address' => $address,
        '@total' => $arg1->order_total));
      return array(array(
        'pass' => TRUE,
        'message' => $message));
      break;
  }
}

/**
 * Implementation of hook_payment_method().
 */
function uc_bitcoin_payment_method() {
  $methods[] = array(
    'id' => 'bitcoin',
    'name' => t('Bitcoin'),
    'title' => t('Bitcoin'),
    'desc' => t('Pay with Bitcoin.'),
    'callback' => 'uc_payment_method_bitcoin',
    'weight' => 1,
    'checkout' => TRUE,
    'no_gateway' => TRUE
  );
  return $methods;
}

/**
 * Implementation of hook_theme().
 */
function uc_bitcoin_theme($existing, $type, $theme, $path) {
  return array(
    'uc_payment_method_' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

function uc_payment_method_bitcoin($op, &$arg1) {
  switch ($op) {
      // Display the Bitcoin address in the payment order pane.
      case 'customer-view':
    case 'order-view':
      $address = db_result(db_query("SELECT bitcoin_address FROM {uc_payment_bitcoin} WHERE order_id=%d", $arg1->order_id));
      return t('Bitcoin address for payment: !address', array('!address' => $address));
      // Add Bitcoin settings to the payment methods settings form.
      case 'settings':
      return uc_bitcoin_settings_form();
  }
}

/*******************************************************************************
 * Bitcoin functions and utility functions
 ******************************************************************************/

/**
 * Check for and try to process pending Bitcoin transactions.
 */
function uc_bitcoin_cron() {
  // TODO: Figure out how to handle user-modified order statuses
  $result = db_query("SELECT {uc_orders}.order_id,order_total,bitcoin_address FROM {uc_orders} LEFT JOIN {uc_payment_bitcoin} ON {uc_orders}.order_id={uc_payment_bitcoin}.order_id WHERE payment_method='bitcoin' and order_status='pending'");
  // TODO: test if $result has any rows

  // prepare the JSON-RPC client
  include_once("bitcoin.inc");
  $bitcoin_client = new BitcoinClient(variable_get("uc_bitcoin_server_scheme", ""),
    variable_get("uc_bitcoin_server_username", ""),
    variable_get("uc_bitcoin_server_password", ""),
    variable_get("uc_bitcoin_server_address", ""),
    variable_get("uc_bitcoin_server_port", ""),
    variable_get("uc_bitcoin_server_certificate_path", ""));
  if (TRUE !== ($fault = $bitcoin_client->can_connect()))
    return watchdog('uc_bitcoin_cron', 'Unable to access Bitcoin server. Fault: !fault', $fault);
  // loop through the open transactions
  while ($my_order = db_fetch_object($result)) {
    // check for transaction completion
    $address = $my_order->bitcoin_address;
    try {
      $paid = $bitcoin_client->query("getreceivedbyaddress", $address, variable_get("uc_bitcoin_transaction_confirms", 1));
    } catch (BitcoinClientException $e) {
      return watchdog('uc_bitcoin', "Bitcoin server communication failed on getreceivedbyaddress !address with fault string !fault", array("!address" => $address, '!fault' => $e . message), WATCHDOG_ALERT);
    }
    $order_id = $my_order->order_id;
    $order = uc_order_load($order_id);
    $order_balance = uc_payment_balance($order);
    $order_total = $my_order->order_total;
    // TODO: Handle overpayment
    // if the amount paid has changed, log a payment
    if ($order_total != $paid + $order_balance)
      uc_payment_enter($order_id, "bitcoin", $paid - ($order_total - $order_balance), 0, NULL, '');

    if ($paid >= $order_total) {
      // PAID IN FULL
      // TODO: If the product was a downloadable, mark the order as completed
      // TODO: next line not needed since we're using uc_payment_enter?
      //uc_order_update_status($order_id, "payment_received");
      uc_order_comment_save($order_id, 9999999, t('Paid in full'), 'order', 'payment_received', TRUE);
      ca_pull_trigger('uc_order_status_email_update', $order);
      continue;
    }
    // NOT PAID YET
    try {
      $label = $bitcoin_client->query("getlabel", $address);
    } catch (BitcoinClientException $e) {
      return watchdog('uc_bitcoin', "Bitcoin server failed on getlabel for !address with fault string !fault", array("!address" => $address, '!fault' => $e . message), WATCHDOG_ALERT);
    }
    list($junk, $junk1, $timestamp) = explode(" ", $label);
    if (time() > ($timestamp + intval(floatval(variable_get("uc_bitcoin_transaction_timeout", 72) * 60 * 60)))) {
      // ORDER EXPIRED
      // TODO: Handle refund of partial payment
      uc_order_update_status($order_id, "canceled");
      $cancelmsg = t("Your payment was not completed with at least !confirms within !timeout hours. Your order has been cancelled. If you have made a partial payment, please contact the shop administrator for a refund.", array(
        '!confirms' => format_plural(variable_get("uc_bitcoin_transaction_confirms", 1), "one confirmation", "@count confirmations"),
        '!timeout' => variable_get("uc_bitcoin_transaction_timeout", 72),
      ));
      uc_order_comment_save($my_order->order_id, 9999999, $cancelmsg, 'order', 'canceled', TRUE);
      ca_pull_trigger('uc_order_status_email_update', $order);
    }
  }
}
