<?php
// $Id$

//include_once('uc_bitcoin.ca.inc');

/**
 * @file
 * Bitcoin payment method.
 *
 * @author Mike Gogulski - http://www.nostate.com/ http://www.gogulski.com/
 */
variable_get('uc_payment_logging', TRUE);
// TODO: validate with _validate($form, &$form_state)
function uc_bitcoin_settings() {
  $form = array();

  $form['server'] = array(
    '#type' => 'fieldset',
    '#title' => t('Server settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['server']['uc_bitcoin_server_scheme'] = array(
    '#type' => 'radios',
    '#title' => t('Server scheme'),
    '#default_value' => variable_get('uc_bitcoin_server_scheme', 1),
    '#options' => array('http' => 'HTTP', 'https' => 'HTTPS'),
  );
  $form['server']['uc_bitcoin_server_certificate_path'] = array(
    '#type' => 'textfield',
    '#title' => t('SSL certificate path'),
    '#default_value' => variable_get('uc_bitcoin_server_certificate_path', ''),
    '#description' => t('Location of the server.cert file you generated for bitcoind, if you are using HTTPS'),
  );
  $form['server']['uc_bitcoin_server_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Server username'),
    '#default_value' => variable_get('uc_bitcoin_server_username', ''),
    '#description' => t("User name for your Bitcoin server's JSON-RPC-HTTP interface"),
  );
  $form['server']['uc_bitcoin_server_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Server password'),
    '#default_value' => variable_get('uc_bitcoin_server_password', ''),
    '#description' => t('Bitcoin server password'),
  );
  $form['server']['uc_bitcoin_server_hostname'] = array(
    '#type' => 'textfield',
    '#title' => t('Server hostname'),
    '#default_value' => variable_get('uc_bitcoin_server_hostname', 'localhost'),
    '#description' => t('Bitcoin server domain name or IP address. Use "localhost" if bitcoind is running on the Ubercart server.'),
  );
  $form['server']['uc_bitcoin_server_port'] = array(
    '#type' => 'textfield',
    '#title' => t('Server port'),
    '#default_value' => variable_get('uc_bitcoin_server_port', '8332'),
    '#description' => t('Bitcoin server port (generally 8332)'),
  );
  $form['transaction'] = array(
    '#type' => 'fieldset',
    '#title' => t('Transaction settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['transaction']['uc_bitcoin_transaction_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction timeout (hours)'),
    '#default_value' => variable_get('uc_bitcoin_transaction_timeout', '72'),
    '#description' => t('Transactions not paid for within this number of hours will be automatically cancelled.'),
  );
  $form['transaction']['uc_bitcoin_transaction_confirms'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction confirmations'),
    '#default_value' => variable_get('uc_bitcoin_transaction_confirms', '1'),
    '#description' => t('Minimum number of Bitcoin transaction network confirmations required before a payment is considered accepted.'),
  );
  return system_settings_form($form);
}

/*******************************************************************************
 * Hook Functions
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_bitcoin_menu() {
  $items = array();
  $items['admin/store/settings/bitcoin'] = array(
    'title' => 'Bitcoin settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_bitcoin_settings'),
    'access arguments' => array('administer store'),
    'description' => 'Bitcoin server and transaction parameters',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

/**
 * Implementation of hook_order().
 */
function uc_bitcoin_order($op, &$arg1, $arg2) {
  switch ($op) {
    case 'submit':
      $bitcoin_client = _uc_bitcoin_get_bitcoin_client();
      if (!$bitcoin_client)
        return array(array('pass' => FALSE, 'message' => t('The Bitcoin server is presently unavailable. Please contact the site administrator.')));
      // stuff the order id, the total order price and a timestamp into the bitcoin address's label
      $label = $arg1->order_id . " " . number_format($arg1->order_total, 2, ".", "") . " " . time();
      $m = new jsonrpcmsg("getnewaddress", array(new jsonrpcval($label, "string")));
      $r = $bitcoin_client->send($m);
      if ($r->faultCode())
        return array(array('pass' => FALSE, 'message' => t('The Bitcoin server was unable to generate an address for your payment. Please contact the site administrator.')));
      $address = $r->value()->scalarVal();
      // TODO: better address validation
      // https://www.bitcoin.org/smf/index.php?topic=1026.0 has PHP code, but it depends on the GMP extension
      if (!$address || empty($address) || strlen($address) < 27 || strlen($address) > 40)
        return array(array('pass' => FALSE, 'message' => t('The Bitcoin server returned an invalid address. Please contact the site administrator.')));
      db_query("INSERT INTO {uc_payment_bitcoin} (order_id, bitcoin_address) VALUES (%d, '%s')", $arg1->order_id, $address);
      $message = t('Please send your payment of BTC @total to Bitcoin address @address.', array(
        '@address' => $address,
        '@total' => $arg1->order_total));
      uc_order_comment_save($arg1->order_id, 9999999, $message, 'order', 'pending', TRUE);
      // TODO: this is cheating...
      uc_order_update_status($arg1->order_id, "pending");
      ca_pull_trigger('uc_order_status_email_update', $arg1);
      return array(array(
        'pass' => TRUE,
        'message' => $message));
      break;
  }
}

/**
 * Implementation of hook_payment_method().
 */
function uc_bitcoin_payment_method() {
  $methods[] = array(
    'id' => 'bitcoin',
    'name' => t('Bitcoin'),
    'title' => t('Bitcoin'),
    'desc' => t('Pay with Bitcoin.'),
    'callback' => 'uc_payment_method_bitcoin',
    'weight' => 1,
    'checkout' => TRUE,
    'no_gateway' => TRUE
  );
  return $methods;
}

/**
 * Implementation of hook_theme().
 */
function uc_bitcoin_theme($existing, $type, $theme, $path) {
  return array(
    'uc_payment_method_' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

function uc_payment_method_bitcoin($op, &$arg1) {
  switch ($op) {
      // Display the Bitcoin address in the payment order pane.
      case 'customer-view':
    case 'order-view':
      $address = db_result(db_query("SELECT bitcoin_address FROM {uc_payment_bitcoin} WHERE order_id=%d", $arg1->order_id));
      return t('Bitcoin address for payment: !address', array('!address' => $address));
      // Add Bitcoin settings to the payment methods settings form.
      case 'settings':
      return uc_bitcoin_settings();
  }
}

/**
 * create a jsonrpc_client object to talk to the bitcoin server and return it, or false on failure
 * @return boolean|jsonrpc_client
 */
function _uc_bitcoin_get_bitcoin_client() {
  require_once("xmlrpc.inc");
  require_once("jsonrpc.inc");
  $uri = variable_get('uc_bitcoin_server_scheme', '') . "://" .
    variable_get('uc_bitcoin_server_username', '') . ":" .
    variable_get('uc_bitcoin_server_password', '') . "@" .
    variable_get('uc_bitcoin_server_hostname', '') . ":" .
    variable_get('uc_bitcoin_server_port', '') . "/";
  $client = new jsonrpc_client($uri);
  //$client->setDebug(2);
  $client->setSSLVerifyHost(0);
  if (variable_get('uc_bitcoin_server_scheme', '') == "https")
    if (strlen(variable_get('uc_bitcoin_server_certificate_path', '')))
      $client->setCaCertificate(variable_get('uc_bitcoin_server_certificate_path', ''));
    else
      $client->setSSLVerifyPeer(false);
  $m = new jsonrpcmsg("getinfo");
  $r = $client->send($m);
  if ($r->faultCode()) {
    watchdog('uc_bitcoin', 'Unable to access Bitcoin server. Fault: !fault', array('fault' => $r->faultString()));
    return false;
  }
  return $client;
}

function uc_bitcoin_cron() {
  // TODO: Figure out how to handle user-modified order statuses
  $result = db_query("SELECT {uc_orders}.order_id,order_total,bitcoin_address FROM {uc_orders} LEFT JOIN {uc_payment_bitcoin} ON {uc_orders}.order_id={uc_payment_bitcoin}.order_id WHERE payment_method='bitcoin' and order_status='pending'");
  // TODO: test if $result has any rows

  // prepare the JSON-RPC client
  if (!$bitcoin_client = _uc_bitcoin_get_bitcoin_client())
    return;
  // loop through the open transactions
  $bitcoin_client->setDebug(1);
  while ($order = db_fetch_object($result)) {
    // check for transaction completion
    $address = $order->bitcoin_address;
    $m = new jsonrpcmsg("getreceivedbyaddress");
    $m->addParam(new jsonrpcval($address));
    $m->addParam(new jsonrpcval(variable_get("uc_bitcoin_transaction_confirms", 1), "int"));
    $r = $bitcoin_client->send($m);
    if ($r->faultCode()) {
      watchdog('uc_bitcoin', "Bitcoin server communication failed on getreceivedbyaddress !address", array("!address" => $address), WATCHDOG_ALERT);
      continue;
    }
    if ($r->value()->kindOf() != "scalar") {
      watchdog('uc_bitcoin', "getreceivedbyaddress returned something other than a scalar for !address", array("!address" => $address), WATCHDOG_ALERT);
      continue;
    }
    $paid = $r->value()->scalarVal();
    $order_balance = uc_payment_balance($order);
    $order_total = $order->order_total;
    $order_id = $order->order_id;
    // TODO: Handle overpayment
    // TODO: test an overpayment
    // a - (b - c) == a - (b + -c) = a + -(b + -c) = a + -b - -c = a - b + c
    // total: 10, balance: 2, paid: 8
    // do nothing
    // total: 10, balance: 2, paid: 11
    // new payment for 1
    // 3 != 100-10
    // paid: 10
    // 10
    // t: 10 b: 10, p: 0
    // if the amount paid has changed, log a payment
    if ($order_total != $paid + $order_balance)
      uc_payment_enter($order_id, "bitcoin", $paid - ($order_total - $order_balance), 0, NULL, '');

    if ($paid >= $order_total) {
      // PAID IN FULL
      // TODO: If the product was a downloadable, mark the order as completed
      // not needed since we're using uc_payment_enter?
      //uc_order_update_status($order_id, "payment_received");
      uc_order_comment_save($order_id, 9999999, t('Paid in full'), 'order', 'payment_received', TRUE);
      ca_pull_trigger('uc_order_status_email_update', $order);
      continue;
    }
    // NOT PAID YET
    $m = new jsonrpcmsg("getlabel", array(new jsonrpcval($address)));
    $r = $bitcoin_client->send($m);
    if ($r->faultCode()) {
      watchdog('uc_bitcoin', "Bitcoin server failed on getlabel for !address", array("!address" => $address), WATCHDOG_ALERT);
      continue;
    }
    if ($r->value()->kindOf() != "scalar") {
      watchdog('uc_bitcoin', "getlabel returned something other than a scalar for !address", array("!address" => $address), WATCHDOG_ALERT);
      continue;
    }
    $label = $r->value()->scalarVal();
    list($junk, $junk1, $timestamp) = explode(" ", $label);
    if (time() > ($timestamp + ((int)variable_get("uc_bitcoin_transaction_timeout", 72) * 60 * 60))) {
      // ORDER EXPIRED
      // TODO: Handle refund of partial payment
      uc_order_update_status($order_id, "canceled");
      // TODO: Verify working
      $cancelmsg = t("Your payment was not completed with at least %confirms within !timeout hours. Your order has been cancelled. If you have made a partial payment, please contact the shop administrator for a refund.", array(
      	'%confirms' => format_plural(variable_get("uc_bitcoin_transaction_confirms", 1), "one confirmation", "@count confirmations"),
      	'!timeout' => variable_get("uc_bitcoin_transaction_timeout", 72),
      ));
      uc_order_comment_save($order->order_id, 9999999, $cancelmsg, 'order', 'canceled', TRUE);
      ca_pull_trigger('uc_order_status_email_update', $order);
    }
  }
}
